{"version":3,"file":"static/js/101.20033fc6.chunk.js","mappings":"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","sources":["webpack://socialnw_practice/./src/components/Profile/Profile.module.scss?4008","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://socialnw_practice/./src/components/Profile/MyPosts/MyPosts.module.scss?39b9","webpack://socialnw_practice/./src/helpers/helpers.module.scss?e9dc","helpers/AddPostMessage.tsx","webpack://socialnw_practice/./src/components/Profile/MyPosts/Post/Post.module.scss?ca59","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","hooks/hooks.ts","components/Profile/ProfileInfo/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"profile_content\":\"Profile_profile_content__ukjtw\",\"profileInfo\":\"Profile_profileInfo__EK+WX\",\"statusBlock\":\"Profile_statusBlock__guNyZ\"};","import React, {ChangeEvent, FC, useEffect, useState} from 'react';\r\nimport s from '../Profile.module.scss'\r\n\r\ntype T_ProfileStatus = {\r\n    status: string,\r\n    updateUserStatus: (status: string) => void\r\n\r\n}\r\n\r\nconst ProfileStatusWithHooks: FC<T_ProfileStatus> = (props) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [status, setStatus] = useState(props.status)\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status]);\r\n\r\n\r\n    const activateEditModeHandler = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditModeHandler = () => {\r\n        setEditMode(false)\r\n        props.updateUserStatus(status)\r\n    }\r\n    const changeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div className={s.statusBlock}>\r\n            {editMode ?\r\n                <div>\r\n                    <input\r\n                        onChange={changeStatusHandler}\r\n                        value={status}\r\n                        autoFocus={true}\r\n                        onBlur={deactivateEditModeHandler}/>\r\n                </div> : <div>\r\n                <span onDoubleClick={activateEditModeHandler}>\r\n                  Status: {status || 'No status'}\r\n                </span>\r\n                </div>}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileStatusWithHooks;","import React, {FC} from 'react';\r\nimport {T_UserProfileBody} from \"../../../redux/reducers/profileReducer\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport s from '../Profile.module.scss'\r\n\r\ntype T_ProfileInfoProps = {\r\n    updateUserStatus: (status: string) => void\r\n    profile: T_UserProfileBody | null\r\n    status: string\r\n}\r\n\r\n\r\nconst ProfileInfo: FC<T_ProfileInfoProps> = ({profile, status, updateUserStatus}) => {\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div className={s.profileInfo}>\r\n            <div>\r\n                <h3>{profile.fullName}</h3>\r\n                <img\r\n                    src={profile.photos.large\r\n                        || profile.photos.small\r\n                        || 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRMx6nyE6BtBUpxyikA6w1afyKRpCc1M38QrA&usqp=CAU'}\r\n                    alt={'ava not found'}/>\r\n                <ProfileStatusWithHooks updateUserStatus={updateUserStatus} status={status}/>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"myPostsBlock\":\"MyPosts_myPostsBlock__y32Zt\",\"posts_messages\":\"MyPosts_posts_messages__+t-N7\"};","// extracted by mini-css-extract-plugin\nexport default {\"addPostBlock\":\"helpers_addPostBlock__6ajDL\"};","import React from 'react';\r\nimport {useFormik} from \"formik\";\r\nimport s from './helpers.module.scss'\r\n\r\ntype T_AppPostMessage = {\r\n    addPostAC: (postMessage: string) => void\r\n}\r\n\r\nconst AddPostMessage: React.FC<T_AppPostMessage> = ({addPostAC}) => {\r\n    const formikPosts = useFormik({\r\n        initialValues: {\r\n            postMessage: ''\r\n        },\r\n        validate: (values) => {\r\n            if (values.postMessage.length < 1) {\r\n                return {postMessage: 'Must be a text'}\r\n            }\r\n        },\r\n        onSubmit: (values) => {\r\n            addPostAC(values.postMessage)\r\n            formikPosts.resetForm()\r\n        }\r\n    })\r\n    return (\r\n        <form onSubmit={formikPosts.handleSubmit} className={s.addPostBlock}>\r\n            {formikPosts.errors.postMessage && formikPosts.touched.postMessage &&\r\n                <div>{formikPosts.errors.postMessage}</div>}\r\n            <textarea\r\n                {...formikPosts.getFieldProps('postMessage')}\r\n            />\r\n            <button disabled={!!formikPosts.errors.postMessage} type='submit'>\r\n                Add post\r\n            </button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default AddPostMessage;","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__peiU2\"};","import React, {FC} from 'react';\r\nimport s from './Post.module.scss';\r\n\r\ntype T_Post = {\r\n    message: string;\r\n    likesCount: number\r\n}\r\n\r\nconst Post: FC<T_Post> = (props) => {\r\n\r\n    return (\r\n        <div className={s.item}>\r\n            <div>\r\n                <img alt={'ava not found'}\r\n                     src='https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRMx6nyE6BtBUpxyikA6w1afyKRpCc1M38QrA&usqp=CAU'/>\r\n            {props.message}\r\n            </div>\r\n            <div>\r\n                <span>like {props.likesCount}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport s from './MyPosts.module.scss';\r\nimport AddPostMessage from \"../../../helpers/AddPostMessage\";\r\nimport Post from \"./Post/Post\";\r\nimport {T_PostData} from \"../../../redux/reducers/profileReducer\";\r\n\r\n\r\ntype T_MyPosts = {\r\n    profilePage: {\r\n        posts: T_PostData[]\r\n    }\r\n    addPostAC: (newPostMessage: string) => void\r\n}\r\n\r\n\r\nconst MyPosts = (props: T_MyPosts) => {\r\n    let {profilePage, addPostAC} = props;\r\n    return (\r\n        <div className={s.myPostsBlock}>\r\n            <span>My posts</span>\r\n            <AddPostMessage addPostAC={addPostAC}/>\r\n            <div className={s.posts_messages}>\r\n                {profilePage.posts.map(el => <Post key={el.id} message={el.message} likesCount={el.likesCount}/>)}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default React.memo(MyPosts);","import MyPosts from \"./MyPosts\";\r\nimport {RootState} from \"../../../redux/reduxStore\";\r\nimport {connect} from \"react-redux\";\r\nimport {addPostAC} from \"../../../redux/reducers/profileReducer\";\r\nimport {compose} from \"redux\";\r\n\r\nconst mapStateToProps = (state: RootState) => {\r\n    return {\r\n        profilePage: state.profilePage\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    addPostAC\r\n}\r\n\r\nexport const MyPostsContainer = compose(connect(mapStateToProps, mapDispatchToProps))(MyPosts);","import React, {FC} from 'react';\r\nimport s from './Profile.module.scss';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {T_ProfileProps} from \"./ProfileInfo/ProfileContainer\"\r\n\r\nconst Profile: FC<T_ProfileProps> = ({userProfile,status,updateUserStatusTC}) => {\r\n    return (\r\n        <div className={s.profile_content}>\r\n            <ProfileInfo updateUserStatus={updateUserStatusTC} status={status}  profile={userProfile}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\r\nimport {AppDispatch, RootState} from \"../redux/reduxStore\";\r\n\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch: () => AppDispatch = useDispatch\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector","import {connect} from \"react-redux\";\r\nimport {RootState} from \"../../../redux/reduxStore\";\r\nimport {\r\n    setUserProfileTC,\r\n    setUserStatusTC,\r\n    T_UserProfileBody,\r\n    updateUserStatusTC\r\n} from \"../../../redux/reducers/profileReducer\";\r\nimport React, {FC, useEffect} from \"react\";\r\nimport Profile from \"../Profile\";\r\nimport {Navigate, useParams} from \"react-router-dom\";\r\nimport {useAppDispatch} from \"../../../hooks/hooks\";\r\nimport {compose} from \"redux\";\r\n\r\nexport type T_ProfileProps = {\r\n    setUserProfileTC: (userId: string) => void\r\n    userProfile: T_UserProfileBody | null,\r\n    updateUserStatusTC: (status: string) => void\r\n    status: string\r\n    isAuth: boolean\r\n}\r\nconst ProfileContainer: FC<T_ProfileProps> = (props) => {\r\n    const params = useParams<{ id: string }>()\r\n    let userId = params.id\r\n    const dispatch = useAppDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(setUserProfileTC(userId))\r\n        dispatch(setUserStatusTC(userId))\r\n    }, [userId, dispatch]);\r\n\r\n\r\n    if (!userId && !props.isAuth) {\r\n        return <Navigate to={'/login'}/>\r\n    }\r\n\r\n    return <Profile {...props}/>\r\n}\r\n\r\nconst mapStateProps = (state: RootState) => {\r\n    return {\r\n        userProfile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        isAuth: state.authReducer.isAuth\r\n    }\r\n}\r\n\r\n\r\nconst mapDispatchProps = {\r\n    setUserProfileTC,\r\n    updateUserStatusTC\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateProps, mapDispatchProps))(ProfileContainer)\r\n\r\n"],"names":["props","editMode","setEditMode","useState","status","setStatus","useEffect","_jsx","className","s","children","onChange","e","currentTarget","value","autoFocus","onBlur","deactivateEditModeHandler","updateUserStatus","_jsxs","onDoubleClick","activateEditModeHandler","_ref","profile","fullName","src","photos","large","small","alt","ProfileStatusWithHooks","Preloader","addPostAC","formikPosts","useFormik","initialValues","postMessage","validate","values","length","onSubmit","resetForm","handleSubmit","errors","touched","getFieldProps","disabled","type","message","likesCount","MyPosts","profilePage","AddPostMessage","posts","map","el","Post","id","React","mapDispatchToProps","MyPostsContainer","compose","connect","state","userProfile","updateUserStatusTC","ProfileInfo","useAppDispatch","useDispatch","mapDispatchProps","setUserProfileTC","isAuth","authReducer","userId","useParams","dispatch","setUserStatusTC","Profile","Navigate","to"],"sourceRoot":""}