{"version":3,"file":"static/js/285.3ca77465.chunk.js","mappings":"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","sources":["webpack://socialnw_practice/./src/components/Profile/Profile.module.scss?4008","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileConacts/ProfileContacts.tsx","components/Profile/ProfileInfo/ProfileConacts/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://socialnw_practice/./src/components/Profile/MyPosts/MyPosts.module.scss?39b9","webpack://socialnw_practice/./src/helpers/helpers.module.scss?e9dc","helpers/AddPostMessage.tsx","webpack://socialnw_practice/./src/components/Profile/MyPosts/Post/Post.module.scss?ca59","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","hooks/hooks.ts","components/Profile/ProfileInfo/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"profile_content\":\"Profile_profile_content__ukjtw\",\"profileInfo\":\"Profile_profileInfo__EK+WX\",\"statusBlock\":\"Profile_statusBlock__guNyZ\"};","import React, {ChangeEvent, FC, useEffect, useState} from 'react';\r\nimport s from '../Profile.module.scss'\r\n\r\ntype T_ProfileStatus = {\r\n    status: string,\r\n    updateUserStatus: (status: string) => void\r\n\r\n}\r\n\r\nconst ProfileStatus: FC<T_ProfileStatus> = (props) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [status, setStatus] = useState(props.status)\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status]);\r\n\r\n\r\n    const activateEditModeHandler = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditModeHandler = () => {\r\n        setEditMode(false)\r\n        props.updateUserStatus(status)\r\n    }\r\n    const changeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div className={s.statusBlock}>\r\n            {editMode ?\r\n                <div>\r\n                    <input\r\n                        onChange={changeStatusHandler}\r\n                        value={status}\r\n                        autoFocus={true}\r\n                        onBlur={deactivateEditModeHandler}/>\r\n                </div> : <div>\r\n                <span onDoubleClick={activateEditModeHandler}>\r\n                 <b> Status: </b> {status || 'No status'}\r\n                </span>\r\n                </div>}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileStatus;","import {T_UserContacts} from \"../../../../redux/reducers/profileReducer\";\r\nimport React, {FC} from \"react\";\r\n\r\ntype T_Props = {\r\n    contacts: T_UserContacts\r\n}\r\n\r\nconst ProfileContacts: FC<T_Props> = ({contacts}) => {\r\n    const contactsFields = Object.keys(contacts);\r\n    const contactsView = contactsFields.map(el => (\r\n        <div key={el}>\r\n            {contacts[el] && <div>\r\n                <b>{el} :</b> {contacts[el]}\r\n            </div>}\r\n        </div>\r\n    ));\r\n    return <div>{contactsView}</div>;\r\n};\r\nexport default  ProfileContacts","import {T_UserContacts} from \"../../../../redux/reducers/profileReducer\";\r\nimport React, {FC} from \"react\";\r\nimport {useFormik} from \"formik\";\r\n\r\ntype T_Props = {\r\n    contacts: T_UserContacts,\r\n}\r\n\r\nconst ProfileDataForm: FC<T_Props> = ({contacts}) => {\r\n    const contactsFields = Object.keys(contacts);\r\n    const profileDataFormik = useFormik({\r\n        initialValues: {\r\n            facebook: '',\r\n            website: '',\r\n            vk: '',\r\n            twitter: '',\r\n            instagram: '',\r\n            youtube: '',\r\n            github: '',\r\n            mainLink: '',\r\n        } as T_UserContacts,\r\n        onSubmit: (values) => {\r\n            console.log(values)\r\n        }\r\n    })\r\n    console.log(profileDataFormik.values)\r\n    return <div>\r\n        <form onSubmit={profileDataFormik.handleSubmit}>\r\n            {contactsFields.map(el => (\r\n                <div key={el}>\r\n                    {contacts[el] &&\r\n                        <input placeholder={contacts[el]?.toString()} {...profileDataFormik.getFieldProps(el)}/>}\r\n                </div>\r\n            ))}\r\n            <button type={'submit'}>Submit</button>\r\n        </form>\r\n    </div>;\r\n};\r\nexport default ProfileDataForm\r\n","import React, {ChangeEvent, FC, useState} from 'react';\r\nimport {T_UserProfileBody} from \"../../../redux/reducers/profileReducer\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatus from \"./ProfileStatus\";\r\nimport s from '../Profile.module.scss'\r\nimport ProfileContacts from \"./ProfileConacts/ProfileContacts\";\r\nimport ProfileDataForm from \"./ProfileConacts/ProfileDataForm\";\r\n\r\ntype T_ProfileInfoProps = {\r\n    updateUserStatus: (status: string) => void\r\n    saveUserPhotoTC: (file: File) => void\r\n    profile: T_UserProfileBody | null\r\n    status: string\r\n    isOwner: boolean\r\n}\r\n\r\n\r\nconst ProfileInfo: FC<T_ProfileInfoProps> = ({profile, isOwner, status, updateUserStatus, saveUserPhotoTC}) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.currentTarget.files?.length) {\r\n            saveUserPhotoTC(e.currentTarget.files[0])\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.profileInfo}>\r\n            <div>\r\n                <h3>{profile.fullName}</h3>\r\n                <img\r\n                    src={profile.photos.large\r\n                        || profile.photos.small\r\n                        || 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRMx6nyE6BtBUpxyikA6w1afyKRpCc1M38QrA&usqp=CAU'}\r\n                    alt={'ava not found'}/>\r\n                <ProfileStatus updateUserStatus={updateUserStatus} status={status}/>\r\n                <div>\r\n                    <div>\r\n                        <b> Looking for a job</b> : {profile.lookingForAJob ? 'Yes' : 'No'}\r\n                    </div>\r\n                    {profile.lookingForAJob &&\r\n                        <div><b>My professional skills :</b>{profile.lookingForAJobDescription}</div>}\r\n                    <div>\r\n                        <b> About me :</b> {profile.aboutMe}\r\n                    </div>\r\n                    <div>\r\n                        <button onClick={() => setEditMode(!editMode)}>Change</button>\r\n                        <b> Contacts :</b>\r\n                        {\r\n                            editMode ?\r\n                                <ProfileContacts contacts={profile.contacts}/> :\r\n                                <ProfileDataForm contacts={profile.contacts}/>\r\n                        }\r\n                    </div>\r\n                </div>\r\n                {isOwner && <input type={'file'} onChange={onPhotoSelected}/>}\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileInfo;\r\n\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"myPostsBlock\":\"MyPosts_myPostsBlock__y32Zt\",\"posts_messages\":\"MyPosts_posts_messages__+t-N7\"};","// extracted by mini-css-extract-plugin\nexport default {\"addPostBlock\":\"helpers_addPostBlock__6ajDL\"};","import React from 'react';\r\nimport {useFormik} from \"formik\";\r\nimport s from './helpers.module.scss'\r\n\r\ntype T_AppPostMessage = {\r\n    addPostAC: (postMessage: string) => void\r\n}\r\n\r\nconst AddPostMessage: React.FC<T_AppPostMessage> = ({addPostAC}) => {\r\n    const formikPosts = useFormik({\r\n        initialValues: {\r\n            postMessage: ''\r\n        },\r\n        validate: (values) => {\r\n            if (values.postMessage.length < 1) {\r\n                return {postMessage: 'Must be a text'}\r\n            }\r\n        },\r\n        onSubmit: (values) => {\r\n            addPostAC(values.postMessage)\r\n            formikPosts.resetForm()\r\n        }\r\n    })\r\n    return (\r\n        <form onSubmit={formikPosts.handleSubmit} className={s.addPostBlock}>\r\n            {formikPosts.errors.postMessage && formikPosts.touched.postMessage &&\r\n                <div>{formikPosts.errors.postMessage}</div>}\r\n            <textarea\r\n                {...formikPosts.getFieldProps('postMessage')}\r\n            />\r\n            <button disabled={!!formikPosts.errors.postMessage} type='submit'>\r\n                Add post\r\n            </button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default AddPostMessage;","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__peiU2\"};","import React, {FC} from 'react';\r\nimport s from './Post.module.scss';\r\n\r\ntype T_Post = {\r\n    message: string;\r\n    likesCount: number\r\n}\r\n\r\nconst Post: FC<T_Post> = (props) => {\r\n\r\n    return (\r\n        <div className={s.item}>\r\n            <div>\r\n                <img alt={'ava not found'}\r\n                     src='https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRMx6nyE6BtBUpxyikA6w1afyKRpCc1M38QrA&usqp=CAU'/>\r\n            {props.message}\r\n            </div>\r\n            <div>\r\n                <span>like {props.likesCount}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport s from './MyPosts.module.scss';\r\nimport AddPostMessage from \"../../../helpers/AddPostMessage\";\r\nimport Post from \"./Post/Post\";\r\nimport {T_PostData} from \"../../../redux/reducers/profileReducer\";\r\n\r\n\r\ntype T_MyPosts = {\r\n    profilePage: {\r\n        posts: T_PostData[]\r\n    }\r\n    addPostAC: (newPostMessage: string) => void\r\n}\r\n\r\n\r\nconst MyPosts = (props: T_MyPosts) => {\r\n    let {profilePage, addPostAC} = props;\r\n    return (\r\n        <div className={s.myPostsBlock}>\r\n            <span>My posts</span>\r\n            <AddPostMessage addPostAC={addPostAC}/>\r\n            <div className={s.posts_messages}>\r\n                {profilePage.posts.map(el => <Post key={el.id} message={el.message} likesCount={el.likesCount}/>)}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default React.memo(MyPosts);","import MyPosts from \"./MyPosts\";\r\nimport {RootState} from \"../../../redux/reduxStore\";\r\nimport {connect} from \"react-redux\";\r\nimport {addPostAC} from \"../../../redux/reducers/profileReducer\";\r\nimport {compose} from \"redux\";\r\n\r\nconst mapStateToProps = (state: RootState) => {\r\n    return {\r\n        profilePage: state.profilePage\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    addPostAC\r\n}\r\n\r\nexport const MyPostsContainer = compose(connect(mapStateToProps, mapDispatchToProps))(MyPosts);","import React, {FC} from 'react';\r\nimport s from './Profile.module.scss';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {T_ProfileProps} from \"./ProfileInfo/ProfileContainer\"\r\n\r\ntype T_Props = {\r\n    isOwner: boolean\r\n}\r\n\r\nconst Profile: FC<T_ProfileProps & T_Props> = ({userProfile, saveUserPhotoTC, isOwner, status, updateUserStatusTC}) => {\r\n    return (\r\n        <div className={s.profile_content}>\r\n            <ProfileInfo\r\n                saveUserPhotoTC={saveUserPhotoTC}\r\n                isOwner={isOwner}\r\n                updateUserStatus={updateUserStatusTC}\r\n                status={status}\r\n                profile={userProfile}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\r\nimport {AppDispatch, RootState} from \"../redux/reduxStore\";\r\n\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch: () => AppDispatch = useDispatch\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector","import {connect} from \"react-redux\";\r\nimport {RootState} from \"../../../redux/reduxStore\";\r\nimport {\r\n    saveUserPhotoTC,\r\n    setUserProfileTC,\r\n    setUserStatusTC,\r\n    T_UserProfileBody,\r\n    updateUserStatusTC\r\n} from \"../../../redux/reducers/profileReducer\";\r\nimport React, {FC, useEffect} from \"react\";\r\nimport Profile from \"../Profile\";\r\nimport {Navigate, useParams} from \"react-router-dom\";\r\nimport {useAppDispatch} from \"../../../hooks/hooks\";\r\nimport {compose} from \"redux\";\r\n\r\nexport type T_ProfileProps = {\r\n    updateUserStatusTC: (status: string) => void\r\n    setUserProfileTC: (userId: string) => void\r\n    saveUserPhotoTC:(file:File)=>void\r\n    userProfile: T_UserProfileBody | null,\r\n    status: string\r\n    isAuth: boolean\r\n}\r\nconst ProfileContainer: FC<T_ProfileProps> = (props) => {\r\n    const {id} = useParams<{ id: string }>()\r\n    const dispatch = useAppDispatch()\r\n    const isOwner = !id\r\n\r\n    useEffect(() => {\r\n        dispatch(setUserProfileTC(id))\r\n        dispatch(setUserStatusTC(id))\r\n    }, [id, dispatch]);\r\n\r\n\r\n    if (!id && !props.isAuth) {\r\n        return <Navigate to={'/login'}/>\r\n    }\r\n\r\n    return <Profile isOwner={isOwner} {...props}/>\r\n}\r\n\r\nconst mapStateProps = (state: RootState) => {\r\n    return {\r\n        userProfile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        isAuth: state.authReducer.isAuth\r\n    }\r\n}\r\n\r\n\r\nconst mapDispatchProps = {\r\n    setUserProfileTC,\r\n    updateUserStatusTC,\r\n    saveUserPhotoTC\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateProps, mapDispatchProps))(ProfileContainer)\r\n\r\n"],"names":["props","editMode","setEditMode","useState","status","setStatus","useEffect","_jsx","className","s","children","onChange","e","currentTarget","value","autoFocus","onBlur","deactivateEditModeHandler","updateUserStatus","_jsxs","onDoubleClick","activateEditModeHandler","_ref","contacts","contactsView","Object","keys","map","el","contactsFields","profileDataFormik","useFormik","initialValues","facebook","website","vk","twitter","instagram","youtube","github","mainLink","onSubmit","values","console","log","handleSubmit","_contacts$el","placeholder","toString","getFieldProps","type","profile","isOwner","saveUserPhotoTC","Preloader","fullName","src","photos","large","small","alt","ProfileStatus","lookingForAJob","lookingForAJobDescription","aboutMe","onClick","ProfileContacts","ProfileDataForm","_e$currentTarget$file","files","length","addPostAC","formikPosts","postMessage","validate","resetForm","errors","touched","disabled","message","likesCount","MyPosts","profilePage","AddPostMessage","posts","Post","id","React","mapDispatchToProps","MyPostsContainer","compose","connect","state","userProfile","updateUserStatusTC","ProfileInfo","useAppDispatch","useDispatch","mapDispatchProps","setUserProfileTC","isAuth","authReducer","useParams","dispatch","setUserStatusTC","Profile","Navigate","to"],"sourceRoot":""}