{"version":3,"file":"static/js/829.7772434c.chunk.js","mappings":"wKACA,SAAgB,QAAU,yBAAyB,KAAO,sBAAsB,YAAc,6BAA6B,gBAAgB,gC,qBCK3I,MAQA,EARoBA,IAEZC,EAAAA,EAAAA,KAAA,OAAAC,UACID,EAAAA,EAAAA,KAACE,EAAAA,GAAO,CAACC,GAAE,YAAAC,OAAcL,EAAMM,IACtBC,UAAWC,IAAA,IAAC,SAACC,GAASD,EAAA,OAAKC,EAAWC,EAAEC,YAAcD,EAAEE,IAAI,EAACV,SAAEF,EAAMY,SCH1F,EAJiBZ,IACNC,EAAAA,EAAAA,KAAA,OAAAC,SAAMF,EAAMa,U,aCEvB,MA6BA,EA7BiDL,IAAmB,IAAlB,WAACM,GAAWN,EAC1D,MAAMO,GAAeC,EAAAA,EAAAA,IAAU,CAC3BC,cAAe,CACXC,YAAa,IAEjBC,SAAWC,GACHA,EAAOF,YAAYG,OAAS,EACrB,CAACH,YAAa,kBAChBE,EAAOF,YAAYG,OAAO,GACxB,CAACH,YAAY,2CADlB,EAIVI,SAAWF,IACPN,EAAWM,EAAOF,aAClBH,EAAaQ,WAAW,IAGhC,OACIC,EAAAA,EAAAA,MAAA,QAAMF,SAAUP,EAAaU,aAAavB,SAAA,CACrCa,EAAaW,OAAOR,cACjBjB,EAAAA,EAAAA,KAAA,OAAAC,SAAMa,EAAaW,OAAOR,eAC9BjB,EAAAA,EAAAA,KAAA,eAAcc,EAAaY,cAAc,kBACzC1B,EAAAA,EAAAA,KAAA,UAAQ2B,WAAYb,EAAaW,OAAOR,YAAaW,KAAM,SAAS3B,SAAC,6DAGlE,ECIf,EAnBiBF,IAELwB,EAAAA,EAAAA,MAAA,OAAKjB,UAAWG,EAAEoB,QAAQ5B,SAAA,EACtBD,EAAAA,EAAAA,KAAA,OAAKM,UAAWG,EAAEqB,YAAY7B,SACzBF,EAAMgC,WAAWC,YAAYC,KAAKC,IACxBlC,EAAAA,EAAAA,KAACmC,EAAU,CAAaxB,KAAMuB,EAAGvB,KAAMN,GAAI6B,EAAG7B,IAA7B6B,EAAG7B,SAGnCkB,EAAAA,EAAAA,MAAA,OAAKjB,UAAWG,EAAE2B,eAAenC,SAAA,CAC5BF,EAAMgC,WAAWM,YAAYJ,KAAIC,IACvBlC,EAAAA,EAAAA,KAACsC,EAAO,CAAa1B,QAASsB,EAAGtB,SAAnBsB,EAAG7B,OAE5BL,EAAAA,EAAAA,KAACuC,EAAgB,CAAC1B,WAAYd,EAAMyC,0B,8BCvBxD,MAAMC,EAAyBC,IACpB,CACHC,OAAQD,EAAME,YAAYD,SCclC,GAAeE,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KAdqBJ,IACd,CACHX,WAAYW,EAAMX,eAGEgB,IACjB,CACHP,kBAAoBQ,IAChBD,GAASE,EAAAA,EAAAA,GAAaD,GAAiB,ODJVE,IACrC,MAAMC,UAA0BC,EAAAA,UAC5BC,MAAAA,GACI,IAAI,OAACV,KAAWW,GAAaC,KAAKxD,MAClC,OAAK4C,GACE3C,EAAAA,EAAAA,KAACkD,EAAS,IAAKI,KADFtD,EAAAA,EAAAA,KAACwD,EAAAA,GAAQ,CAACrD,GAAI,UAEtC,EAKJ,OAFiC2C,EAAAA,EAAAA,IAAQL,EAARK,CAA+BK,EAE/B,GCFrC,CAGEM,E","sources":["webpack://socialnw_practice/./src/components/Dialogs/dialogs.module.scss?e96b","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","helpers/AddDialogMessage.tsx","components/Dialogs/Dialogs.tsx","hoc/AuthRedirectHOC.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"dialogs_dialogs__juqr7\",\"name\":\"dialogs_name__9EQ4p\",\"name_active\":\"dialogs_name_active__LN5dr\",\"message-items\":\"dialogs_message-items__p55Ez\"};","import {NavLink} from \"react-router-dom\";\r\nimport s from \"../dialogs.module.scss\";\r\nimport React from \"react\";\r\nimport {T_UserDialog} from \"../../../redux/reducers/dialogReducer\";\r\n\r\n\r\nconst DialogItem = (props: T_UserDialog) => {\r\n    return (\r\n        <div>\r\n            <NavLink to={`/dialogs/${props.id}`}\r\n                     className={({isActive}) => isActive ? s.name_active : s.name}>{props.name}</NavLink>\r\n        </div>\r\n    );\r\n};\r\nexport default DialogItem;","import React from 'react';\r\nimport {T_Message} from \"../../../redux/reducers/dialogReducer\";\r\n\r\nconst Message = (props: T_Message) => {\r\n    return <div>{props.message}</div>\r\n}\r\n\r\nexport default Message;","import React, {FC} from 'react';\r\nimport {useFormik} from \"formik\";\r\n\r\ntype T_AddDialogMessage = {\r\n    addMessage: (newMessageTitle: string) => void\r\n}\r\nconst AddDialogMessage: FC<T_AddDialogMessage> = ({addMessage}) => {\r\n    const formikDialog = useFormik({\r\n        initialValues: {\r\n            messageText: ''\r\n        },\r\n        validate: (values) => {\r\n            if (values.messageText.length < 1) {\r\n                return {messageText: 'Must be a text'}\r\n            }else if(values.messageText.length>30){\r\n                return {messageText:'Message must be lower then 30 symb'}\r\n            }\r\n        },\r\n        onSubmit: (values) => {\r\n            addMessage(values.messageText)\r\n            formikDialog.resetForm()\r\n        }\r\n    })\r\n    return (\r\n        <form onSubmit={formikDialog.handleSubmit}>\r\n            {formikDialog.errors.messageText  &&\r\n                <div>{formikDialog.errors.messageText}</div>}\r\n            <textarea {...formikDialog.getFieldProps('messageText')}/>\r\n            <button disabled={!!formikDialog.errors.messageText} type={'submit'}>\r\n                Отправить\r\n            </button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default AddDialogMessage;","import React from 'react';\r\nimport s from './dialogs.module.scss'\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport AddDialogMessage from \"../../helpers/AddDialogMessage\";\r\nimport {T_Message, T_UserDialog} from \"../../redux/reducers/dialogReducer\";\r\n\r\n\r\ntype T_Dialog = {\r\n    dialogPage: {\r\n        dialogsData: T_UserDialog[],\r\n        messageData: T_Message[],\r\n    }\r\n    addMessageHandler: (newMessageTitle: string) => void\r\n}\r\n\r\nconst Dialogs = (props: T_Dialog) => {\r\n        return (\r\n            <div className={s.dialogs}>\r\n                <div className={s.names_items}>\r\n                    {props.dialogPage.dialogsData.map((el) => {\r\n                        return <DialogItem key={el.id} name={el.name} id={el.id}/>\r\n                    })}\r\n                </div>\r\n                <div className={s.messages_items}>\r\n                    {props.dialogPage.messageData.map(el => {\r\n                        return <Message key={el.id} message={el.message}/>\r\n                    })}\r\n                    <AddDialogMessage addMessage={props.addMessageHandler}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n;\r\n\r\nexport default Dialogs;","import {Navigate} from \"react-router-dom\";\r\nimport React, {ComponentType} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootState} from \"../redux/reduxStore\";\r\n\r\nconst mapStateRedirectProps = (state: RootState) => {\r\n    return {\r\n        isAuth: state.authReducer.isAuth\r\n    }\r\n}\r\n\r\n\r\nexport const withAuthRedirectHOC = <T, >(Component: ComponentType<T>) => {\r\n    class RedirectComponent extends React.Component <{ isAuth: boolean }> {\r\n        render() {\r\n            let {isAuth, ...restProps} = this.props\r\n            if (!isAuth) return <Navigate to={'/login'}/>\r\n            return <Component {...restProps as T & {}}/>\r\n        }\r\n    }\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateRedirectProps)(RedirectComponent)\r\n\r\n    return ConnectedRedirectComponent\r\n}\r\n\r\n// export function withAuthRedirectHOC<T>(Component: ComponentType<T>) {\r\n//     const RedirectComponent = (props: { isAuth: boolean }) => {\r\n//         let {isAuth, ...restProps} = props\r\n//         if (!isAuth) return <Navigate to={'/login'}/>\r\n//         return <Component {...restProps as T & {}}/>\r\n//     }\r\n//     let ConnectedRedirectComponent = connect(mapStateRedirectProps)(RedirectComponent)\r\n//\r\n//     return ConnectedRedirectComponent\r\n// }","import {addMessageAC,} from \"../../redux/reducers/dialogReducer\";\r\nimport {AppDispatch, RootState} from \"../../redux/reduxStore\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport React from \"react\";\r\nimport {withAuthRedirectHOC} from \"../../hoc/AuthRedirectHOC\";\r\n\r\nconst mapStateToProps = (state: RootState) => {\r\n    return {\r\n        dialogPage: state.dialogPage,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: AppDispatch) => {\r\n    return {\r\n        addMessageHandler: (newMessageTitle: string) => {\r\n            dispatch(addMessageAC(newMessageTitle))\r\n        },\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirectHOC,\r\n)(Dialogs)"],"names":["props","_jsx","children","NavLink","to","concat","id","className","_ref","isActive","s","name_active","name","message","addMessage","formikDialog","useFormik","initialValues","messageText","validate","values","length","onSubmit","resetForm","_jsxs","handleSubmit","errors","getFieldProps","disabled","type","dialogs","names_items","dialogPage","dialogsData","map","el","DialogItem","messages_items","messageData","Message","AddDialogMessage","addMessageHandler","mapStateRedirectProps","state","isAuth","authReducer","compose","connect","dispatch","newMessageTitle","addMessageAC","Component","RedirectComponent","React","render","restProps","this","Navigate","Dialogs"],"sourceRoot":""}